'use strict';

//Preview card

var itemsSocialMedia = document.querySelectorAll('.fill-input__placeholder');
var uploadBtn = document.querySelector('.fill-input__image');
var uploadInput = document.querySelector('.fill-input__input');
var uploadPhoto = document.querySelector('.card__image');
var uploadMiniPhoto = document.querySelector('.square__white');
var fr = new FileReader();


function reWriteData(e) {
  var fillInput = e.currentTarget;
  var targetInput = fillInput.getAttribute('data-stringer');
  var sendCont = document.querySelector('#' + targetInput);
  var itemAttribute = fillInput.getAttribute('type');
  if (itemAttribute === 'number') {
    sendCont.href += fillInput.value;
  } else if (itemAttribute === 'email') {
    sendCont.href += fillInput.value;
  } else if (itemAttribute === 'url') {
    var scriptUrl = fillInput.value + '/';
    sendCont.href += scriptUrl;
  } else {
    sendCont.innerHTML = fillInput.value;
  }
}

//Cargar Imagen


function mostrarImagen(e) {
  var myFile = e.currentTarget.files[0];
  fr.addEventListener('load', writeImage);
  fr.readAsDataURL(myFile);
}

function writeImage() {
  var urlPhoto = 'url(' + '"' + fr.result + '"' + ')';
  uploadPhoto.style.backgroundImage = urlPhoto;
  uploadMiniPhoto.style.backgroundImage = urlPhoto;
}

function clickInput() {
  uploadInput.click();
}
//console.log(uploadInput);
uploadInput.addEventListener('change', mostrarImagen);
uploadBtn.addEventListener('click', clickInput);

for (var i = 0; i < itemsSocialMedia.length; i++) {
  var targetAttribute = itemsSocialMedia[i].getAttribute('type');
  if (targetAttribute === 'url') {
    itemsSocialMedia[i].addEventListener('change', reWriteData);
  } else {
    itemsSocialMedia[i].addEventListener('keyup', reWriteData);
  }
}

//habilidades
const buttonAdd = document.querySelector('.js-button-abilitiesPlus');
const buttonRemove = document.querySelectorAll('.js-button-abilitiesMinus');
const boxSkills = document.querySelectorAll('.js-ability-box');
const selectSkills = document.querySelectorAll('.js-select-abilities');

//var selectInputSkills = document.querySelector('.js-select-abilities');

const createOption = text => {
  //Crea un option
  const option = document.createElement('option');
  // Crea un nodo de texto
  const optionText = document.createTextNode(text);
  option.appendChild(optionText);
  return option;
};

const fillSelect = () => {
  const url =
    'https://raw.githubusercontent.com/Adalab/dorcas-s2-proyecto-data/master/skills.json';
  fetch(url)
    .then(response => response.json())
    .then(json => {
      const skillList = json.skills;
      skillList.unshift('Selecciona una habilidad');
      for (const selectSkill of selectSkills) {
        for (const skillElement of skillList) {
          const newSkillsOption = createOption(skillElement);
          selectSkill.appendChild(newSkillsOption);
        }
      }
    });

};

let pseudoBoxCardSkill;
//function addSkill() {
//  var boxHidden = document.querySelectorAll('.skills-hidden');

const skillContainer = document.querySelector('.js-card_skills--list');

const addSkill = () => {
  const boxCardSkill = document.querySelectorAll('.skill');
  const boxHidden = document.querySelectorAll('.skills-hidden');
  if (boxHidden.length === 2) {
    boxSkills[1].classList.remove('skills-hidden');
  } else if (boxHidden.length === 1) {
    boxSkills[2].classList.remove('skills-hidden');
  } else {
    console.log('no hay mas habilidades que desplegar');
  }

  if (boxCardSkill.length === 1) {
    pseudoBoxCardSkill = document.createElement('li');
    console.log(pseudoBoxCardSkill);
    pseudoBoxCardSkill.setAttribute('class','js-skill skill remove');
  } else if (boxCardSkill.length === 2) {
    pseudoBoxCardSkill = document.createElement('li');
    pseudoBoxCardSkill.setAttribute('class', 'js-skill skill remove');
  } else {
    console.log('no hay mas habilidades que añadir');
  }
  skillContainer.appendChild(pseudoBoxCardSkill);
};


const removeSkill = event => {
  const sizePseudoBoxCardSkill = document.querySelectorAll('.remove');
  const parentBox = event.currentTarget.parentElement;
  parentBox.classList.add('skills-hidden');

  if(sizePseudoBoxCardSkill.length === 2){
    sizePseudoBoxCardSkill[1].remove();
  } else if(sizePseudoBoxCardSkill.length === 1){
    sizePseudoBoxCardSkill[0].remove();
  }
};

buttonAdd.addEventListener('click', addSkill);
buttonRemove[0].addEventListener('click', removeSkill);
buttonRemove[1].addEventListener('click', removeSkill);
fillSelect();

//HABILIDADES DE LA TARJETA


const addSelectSkills = () => {
  let newContentSkill;
  const newBoxSkill = document.querySelectorAll('.skill');

  for (let i = 0; i < newBoxSkill.length; i++){ //Si lo pasas a "for of" da error
    newContentSkill = document.createTextNode(selectSkills[i].value);
    newBoxSkill[i].innerHTML = '';
    newBoxSkill[i].appendChild(newContentSkill);
  }
};

for (const selectSkill of selectSkills) {
  selectSkill.addEventListener('change', addSelectSkills);
}

//colapsables
const activableSection = document.querySelectorAll('.js-collapsible-title');
const collapsibles = document.querySelectorAll('.js-collapsible-select');

// un colapsable abierto cada vez

const  closeCollapsibles =() => {
  for (const closedCollapsible of collapsibles){
    closedCollapsible.classList.remove('js-collapsible-visible');
  }
};

//abre y cierra colapsables

const collapsibleDesign = (event) => {
  const parent = event.currentTarget.parentElement;
  closeCollapsibles();
  // Si contiene la clase hidden la elimina y sino la añade
  parent.classList.toggle('js-collapsible-visible');
};

for (const eachActivableSection of activableSection){
  eachActivableSection.addEventListener('click',collapsibleDesign);
}

//actualizar colores
var radioButtonColor = document.querySelectorAll('.color-check');
var card = document.querySelector('.jsCard');
var attri;

function selectColorCard(event) {
  //console.log('que hay en radiobut', radioButtonColor);
  card.classList.remove('green-card', 'red-card', 'blue-card');
  attri = event.currentTarget.getAttribute('data-dest');
  card.classList.add(attri);
}

for (var l = 0; l < radioButtonColor.length; l++) {
  radioButtonColor[l].addEventListener('click', selectColorCard);

}


//actualizar fuentes

var radioButtonFont = document.querySelectorAll('.font-check');
var attriFont;

function selectFontCard(event) {
  //console.log('que hay en radiobut', radioButtonFont);
  card.classList.remove('ubuntu-card', 'comic-card', 'montse-card');
  attriFont = event.currentTarget.getAttribute('data-font');
  card.classList.add(attriFont);
}

for (var m = 0; m < radioButtonFont.length; m++) {
  radioButtonFont[m].addEventListener('click', selectFontCard);
  //console.log(radioButtonFont[h]);
}

'use strict';

const buttonCreateCard = document.querySelector('.js-btn-create-card');
const photoFileReader = new FileReader();
const form = document.querySelector('.formjs');
const responseURL = document.querySelector('.link-awesome');



const getJSONFromInputs = (inputs) => {
  return inputs.reduce(function (acc, val) {
    if (val.type==='radio' && val.checked===true) {
      acc[val.name] = val.value;
    }
    if ((val.nodeName !== 'BUTTON') && (val.nodeName !== 'FIELDSET') && (val.type!=='radio') && ( val.type !== 'select-one' ) ) {
      acc[val.name] = val.value;
    }
    if ( val.type === 'select-one' ){
      if (val.value !== 'Selecciona una habilidad'){
        acc.skills.push(val.value);
      }
    }
    return acc;
  }, {skills: []});
};


const sendData = () => {
  let inputs = Array.from(form.elements);
  console.log(inputs);
  let json = getJSONFromInputs(inputs);
  // json.skills = ['Javascript', ' React'];
  json.photo = photoFileReader.result;
  delete json[''];
  sendRequest(json);
  localStorage.setItem('Business-Card', JSON.stringify(json));
};

const loadPhoto = () => {
  const showTwitter = document.querySelector('.js-hidden-twitter');
  let addedPhoto = document.querySelector('#add-image').files[0];
  showTwitter.classList.remove('js-hidden-twitter');
  buttonCreateCard.classList.add('js-press-button');
  if(addedPhoto){
    photoFileReader.addEventListener('load', sendData);
    photoFileReader.readAsDataURL(addedPhoto);
  } else {
    console.log('Carga la foto melon!!');
  }
};

const sendRequest = (json)=> {
  fetch('https://us-central1-awesome-cards-cf6f0.cloudfunctions.net/card/', {
    method: 'POST',
    body: JSON.stringify(json),
    headers: {
      'content-type': 'application/json'
    },
  })
    .then(function(resp) {
      return resp.json();
    })
    .then(function(result) {
      showURL(result);
    })
    .catch(function(error) {
      console.log(error);
    });
};

let tweet;
const showURL = (result) =>{
  if (result.success) {
    responseURL.innerHTML = '<a class="link-awesome" target="_blank" href=' + result.cardURL + '>' + result.cardURL + '</a>';
  } else {
    responseURL.innerHTML = 'ERROR:' + result.error;
  }
  tweet = result.cardURL;
};
buttonCreateCard .addEventListener('click', loadPhoto);


// Compartir tarjeta en Twitter
const btnShareTwitter = document.querySelector('.btn-sharejs');
const btnToTwitter = document.querySelector('.link-awesome');
const linkToTwitter = document.querySelector('.linkTwitter');
let shareTwitter= () => {
  linkToTwitter.href = 'https://twitter.com/intent/tweet?url=' + tweet + '&text=Tarjeta%20de%20de%20presentacion%20con%20Awesome%20profile-cards%20(StringerThings%20-%20Sprint2%20de%20Adalab)&hashtags=WomenInTech';
};

const clickA = () => {
  linkToTwitter.click();
};
linkToTwitter.addEventListener('click', shareTwitter);
btnShareTwitter.addEventListener('click', clickA);

'use strict';

const lSname = document.querySelector('#nmb');
const lSnameCard = document.querySelector('#fullname');
const lSjob = document.querySelector('#job');
const lSjobCard = document.querySelector('#profesion');
const lSimg = document.querySelector('#add-image');
const lSmail = document.querySelector('#emailaddress');
const lSmailCard = document.querySelector('#mail-link');
const lSphone = document.querySelector('#phone');
const lSphoneCard = document.querySelector('#mobile-link');
const lSlinkedin = document.querySelector('#lkdn');
const lSlinkedinCard = document.querySelector('#linkedin-link');
const lSgit = document.querySelector('#GH');
const lSgitCard = document.querySelector('#github-link');


const lSpalettes = document.querySelectorAll('.color-check');
const lSfonts = document.querySelectorAll('.font-check');

const cardlocal = document.querySelector('.jsCard');

let dataCard = {};


const recoverLocalStorage = () => {
  if (!localStorage.getItem('Business-Card')) {
    resetform();
    // dataCard = {
    //   'name': 'Nombre apellidos',
    //   'job': 'Profesión',
    //   'photo': '',
    //   'email': '',
    //   'phone': '',
    //   'linkedin': '',
    //   'github': '',
    //   'pallete': '',
    //   'typography': ''
    // }
  } else {
    dataCard = JSON.parse(localStorage.getItem('Business-Card'));
  }

  lSname.value = dataCard.name;
  lSnameCard.innerText = dataCard.name;
  lSjob.value = dataCard.job;
  lSjobCard.innerText = dataCard.job
  uploadPhoto.style.backgroundImage = "url(" + dataCard.photo + ")";
  uploadMiniPhoto.style.backgroundImage = "url(" + dataCard.photo + ")";
  lSmail.value = dataCard.email;
  lSmailCard.href = "mailto:" + dataCard.email;
  lSphone.value = dataCard.phone;
  lSlinkedin.value = dataCard.linkedin;
  lSlinkedinCard.href = "https://www.linkedin.com/in/" + dataCard.linkedin;
  lSgit.value = dataCard.github;
  lSgitCard.value = 'https://github.com/' + dataCard.github;
  lSphoneCard.href = 'tel:' + dataCard.phone;
  for (const paletteLocal of lSpalettes) {
    if (paletteLocal.value === dataCard.palette) {
      paletteLocal.checked = true;
      cardlocal.classList.remove('green-card', 'red-card', 'blue-card');
      const attri = paletteLocal.getAttribute('data-dest');
      cardlocal.classList.add(attri);
    } else {
      paletteLocal.checked = false;
    }
  }
  for (const fontLocal of lSfonts) {
    if (fontLocal.value === dataCard.typography) {

      fontLocal.checked = true;
      cardlocal.classList.remove('ubuntu-card', 'comic-card', 'montse-card');
      const attriFont = fontLocal.getAttribute('data-font');
      cardlocal.classList.add(attriFont);

    } else {
      fontLocal.checked = false;
    }
  }

};


recoverLocalStorage();

'use strict';


const resetbtn = document.querySelector('.resetbutton');
const fullName = document.querySelector('#fullname');
const profesion = document.querySelector('#profesion');
const mobileNumber = document.querySelector('#mobile-link');
const mailAddress = document.querySelector('#mail-link');
const linkedinLink = document.querySelector('#linkedin-link');
const githubLink = document.querySelector('#github-link');

const cardReset = document.querySelector('.jsCard');
const showTwitter = document.querySelector('.js-hidden-twitter');
const btnCreateCardReset = document.querySelector('.js-btn-create-card');

//Objeto que traemos del saveLocalStorage
let resetCard = {};
resetCard.name = 'Nombre apellido';
resetCard.occupation = 'Profesión';
resetCard.email = '';
resetCard.telephone = '';
resetCard.linkedin = '';
resetCard.gitHub = '';
localStorage.setItem('Reset-Card', JSON.stringify(resetCard));


const resetform = ()=> {
  document.querySelector('.form').reset();

  resetCard = JSON.parse(localStorage.getItem('Reset-Card'));
  fullName.textContent=resetCard.name;
  profesion.textContent = resetCard.occupation;
  mobileNumber.href = resetCard.email;
  mailAddress.href = resetCard.telephone;
  linkedinLink.href = resetCard.linkedin;
  githubLink.href = resetCard.gitHub;
  uploadPhoto.style.backgroundImage = 'url(../images/image-card.png)';
  uploadMiniPhoto.style.backgroundImage = '';
  cardReset.classList.remove('green-card', 'red-card', 'blue-card');
  cardReset.classList.add('green-card');
  cardReset.classList.remove('ubuntu-card', 'comic-card', 'montse-card');
  cardReset.classList.add('comic-card');
  showTwitter.classList.add('js-hidden-twitter');
  btnCreateCardReset.classList.remove('js-press-button');
};


resetbtn.addEventListener('click', resetform);

//# sourceMappingURL=main.min.js.map
